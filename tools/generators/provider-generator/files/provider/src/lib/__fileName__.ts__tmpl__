import {
  ContextTransformer,
  FeatureProvider,
  FlagEvaluationOptions,
  noopContextTransformer,
  ProviderEvaluation,
} from '@openfeature/openfeature-js';

export class <%= libClassName %> implements FeatureProvider {
  
  name = '<%= name %>';
  contextTransformer: ContextTransformer<unknown> = noopContextTransformer;
  
  isEnabledEvaluation(
    flagKey: string,
    defaultValue: boolean,
    transformedContext: unknown,
    options?: FlagEvaluationOptions
  ): Promise<ProviderEvaluation<boolean>> {
    throw new Error('Method not implemented.');
  }

  getBooleanEvaluation(
    flagKey: string,
    defaultValue: boolean,
    transformedContext: unknown,
    options: FlagEvaluationOptions | undefined
  ): Promise<ProviderEvaluation<boolean>> {
    throw new Error('Method not implemented.');
  }

  getStringEvaluation(
    flagKey: string,
    defaultValue: string,
    transformedContext: unknown,
    options: FlagEvaluationOptions | undefined
  ): Promise<ProviderEvaluation<string>> {
    throw new Error('Method not implemented.');
  }

  getNumberEvaluation(
    flagKey: string,
    defaultValue: number,
    transformedContext: unknown,
    options: FlagEvaluationOptions | undefined
  ): Promise<ProviderEvaluation<number>> {
    throw new Error('Method not implemented.');
  }

  getObjectEvaluation<U extends object>(
    flagKey: string,
    defaultValue: U,
    transformedContext: unknown,
    options: FlagEvaluationOptions | undefined
  ): Promise<ProviderEvaluation<U>> {
    throw new Error('Method not implemented.');
  }
}